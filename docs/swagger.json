{
    "swagger": "2.0",
    "basePath": "/api",
    "paths": {
        "/device/assets": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Device doesn't have access to the specified asset"
                    }
                },
                "description": "Get device assets based on the ID or, if no parameters, get all assets",
                "operationId": "get_device_query_assets",
                "parameters": [
                    {
                        "name": "asset_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Asset UUID to query"
                    },
                    {
                        "name": "id_asset",
                        "in": "query",
                        "type": "integer",
                        "description": "Asset ID to query"
                    },
                    {
                        "name": "with_urls",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also include assets infos and download-upload url"
                    },
                    {
                        "name": "with_only_token",
                        "in": "query",
                        "type": "boolean",
                        "description": "Only includes the access token. Will ignore with_urls if specified."
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "type": "string",
                        "description": "Secret Token"
                    }
                ],
                "tags": [
                    "device"
                ]
            }
        },
        "/device/devices": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented"
                    },
                    "403": {
                        "description": "Logged device doesn't have permission to access the requested data"
                    }
                },
                "description": "Return device information.",
                "operationId": "get_device_query_devices",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "device"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged device can't update the specified device"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_device) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occurred when saving device"
                    }
                },
                "description": "Update a device. A device can only update its own data. For now, only device_config can be updated with that API.",
                "operationId": "post_device_query_devices",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "device"
                ]
            }
        },
        "/device/login": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented"
                    },
                    "403": {
                        "description": "Logged device doesn't have permission to access the requested data"
                    }
                },
                "description": "Login device with Token.",
                "operationId": "get_device_login",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "type": "string",
                        "description": "Secret Token"
                    }
                ],
                "tags": [
                    "device"
                ]
            }
        },
        "/device/logout": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Device isn't logged in"
                    }
                },
                "description": "Device logout.",
                "operationId": "get_device_logout",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "type": "string",
                        "description": "Secret Token"
                    }
                ],
                "tags": [
                    "device"
                ]
            }
        },
        "/device/participants": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented"
                    },
                    "403": {
                        "description": "Logged device doesn't have permission to access the requested data"
                    }
                },
                "description": "Return participant information, if allowed.",
                "operationId": "get_device_query_participants",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "device"
                ]
            }
        },
        "/device/register": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success, will return registration information. Devices must then be enabled by admin."
                    },
                    "400": {
                        "description": "Missing parameter(s)"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                },
                "description": "Register a device with certificate or token request. This endpoint is rate limited. Use application/octet-stream to send CSR or application/json Content-Type for token generation.",
                "operationId": "post_device_register",
                "tags": [
                    "device"
                ]
            }
        },
        "/device/sessions": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "delete_device_query_sessions",
                "tags": [
                    "device"
                ]
            },
            "get": {
                "responses": {
                    "403": {
                        "description": "Forbidden for security reasons."
                    }
                },
                "description": "Get session",
                "operationId": "get_device_query_sessions",
                "parameters": [
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "description": "Session ID"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "List all sessions"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "device"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Required parameter is missing"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "501": {
                        "description": "Not implemented"
                    },
                    "403": {
                        "description": "Logged device doesn't have permission to access the requested data"
                    }
                },
                "description": "Update/Create session",
                "operationId": "post_device_query_sessions",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/device_session"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "device"
                ]
            }
        },
        "/device/sessions/events": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "operationId": "delete_device_query_session_events",
                "tags": [
                    "device"
                ]
            },
            "get": {
                "responses": {
                    "403": {
                        "description": "Forbidden for security reasons."
                    }
                },
                "description": "Get session events",
                "operationId": "get_device_query_session_events",
                "parameters": [
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Session ID"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "device"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Required parameter is missing"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "501": {
                        "description": "Not implemented"
                    },
                    "403": {
                        "description": "Logged device doesn't have permission to access the requested data"
                    }
                },
                "description": "Update/Create session events",
                "operationId": "post_device_query_session_events",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "device"
                ]
            }
        },
        "/device/status": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented"
                    },
                    "403": {
                        "description": "Logged device doesn't have permission to access the requested data"
                    }
                },
                "description": "Set the device status (will update UserManagerModule).",
                "operationId": "post_device_query_status",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/device_status"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "device"
                ]
            }
        },
        "/participant/assets": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Participant doesn't have access to the specified asset"
                    }
                },
                "description": "Get participant assets based on the ID or, if no parameters, get all assets",
                "operationId": "get_participant_query_assets",
                "parameters": [
                    {
                        "name": "asset_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Asset UUID to query"
                    },
                    {
                        "name": "id_asset",
                        "in": "query",
                        "type": "integer",
                        "description": "Asset ID to query"
                    },
                    {
                        "name": "with_urls",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also include assets infos and download-upload url"
                    },
                    {
                        "name": "with_only_token",
                        "in": "query",
                        "type": "boolean",
                        "description": "Only includes the access token. Will ignore with_urls if specified."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "participant"
                ]
            }
        },
        "/participant/devices": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Logged user doesn't have permission to access the requested data"
                    }
                },
                "description": "Query devices associated with a participant.",
                "operationId": "get_participant_query_devices",
                "parameters": [
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device to query"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "participant"
                ]
            }
        },
        "/participant/login": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - Login succeeded"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Logged user doesn't have permission to access the requested data"
                    }
                },
                "description": "Participant login with HTTPAuth",
                "operationId": "get_participant_login",
                "parameters": [
                    {
                        "name": "with_websocket",
                        "in": "query",
                        "type": "boolean",
                        "description": "If set, requires that a websocket url is returned.If not possible to do so, return a 403 error."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "participant"
                ]
            }
        },
        "/participant/logout": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Logged user doesn't have permission to access the requested data"
                    }
                },
                "description": "Logout participant",
                "operationId": "get_participant_logout",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "participant"
                ]
            }
        },
        "/participant/participants": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Logged user doesn't have permission to access the requested data"
                    }
                },
                "description": "Return participant information.",
                "operationId": "get_participant_query_participants",
                "parameters": [
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "participant"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - To be documented"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Logged user doesn't have permission to access the requested data"
                    }
                },
                "description": "To be documented To be documented",
                "operationId": "post_participant_query_participants",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "participant"
                ]
            }
        },
        "/participant/refresh_token": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "description": "Refresh token, old token needs to be passed in request headers.",
                "operationId": "get_participant_refresh_token",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "participant"
                ]
            }
        },
        "/participant/sessions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Bad request"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Logged user doesn't have permission to access the requested data"
                    }
                },
                "description": "Get session associated with participant.",
                "operationId": "get_participant_query_sessions",
                "parameters": [
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the session to query"
                    },
                    {
                        "name": "session_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Session UUID to query"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "type": "integer",
                        "description": "Limit to specific session status"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Maximum number of results to return"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Number of items to ignore in results, offset from 0-index"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "name": "start_date",
                        "in": "query",
                        "type": "string",
                        "format": "date",
                        "description": "Start date, sessions before that date will be ignored"
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "type": "string",
                        "format": "date",
                        "description": "End date, sessions after that date will be ignored"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "participant"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - To be documented"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Logged user doesn't have permission to access the requested data"
                    }
                },
                "description": "To be documented To be documented",
                "operationId": "post_participant_query_sessions",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "participant"
                ]
            }
        },
        "/service/access": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return access information.",
                "operationId": "get_service_query_access",
                "parameters": [
                    {
                        "name": "from_user_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Participant uuid requesting access"
                    },
                    {
                        "name": "from_participant_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Participant uuid requesting access"
                    },
                    {
                        "name": "from_device_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Participant uuid requesting access"
                    },
                    {
                        "name": "with_users",
                        "in": "query",
                        "type": "boolean",
                        "description": "List accessible users",
                        "default": false
                    },
                    {
                        "name": "with_projects",
                        "in": "query",
                        "type": "boolean",
                        "description": "List accessible projects",
                        "default": false
                    },
                    {
                        "name": "with_participants",
                        "in": "query",
                        "type": "boolean",
                        "description": "List accessible participants",
                        "default": false
                    },
                    {
                        "name": "with_devices",
                        "in": "query",
                        "type": "boolean",
                        "description": "List accessible device",
                        "default": false
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "List accessible site",
                        "default": false
                    },
                    {
                        "name": "admin",
                        "in": "query",
                        "type": "boolean",
                        "description": "List only accessible with admin rights",
                        "default": false
                    },
                    {
                        "name": "with_names",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also includes the names of the returned items",
                        "default": false
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/assets": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Service can't delete asset"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific asset",
                "operationId": "delete_service_query_assets",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "query",
                        "type": "string",
                        "required": true,
                        "description": "Asset UUID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return assets information.",
                "operationId": "get_service_query_assets",
                "parameters": [
                    {
                        "name": "id_asset",
                        "in": "query",
                        "type": "integer",
                        "description": "Specific ID of asset to query information."
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to request all assets"
                    },
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of session from which to request all assets"
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of participant from which to request all assets"
                    },
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user from which to request all assets."
                    },
                    {
                        "name": "service_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Query all assets associated with that service uuid"
                    },
                    {
                        "name": "id_creator_service",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the service from which to request all created assets."
                    },
                    {
                        "name": "id_creator_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user from which to request all created assets."
                    },
                    {
                        "name": "id_creator_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant from which to request all created assets."
                    },
                    {
                        "name": "id_creator_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to request all created assets."
                    },
                    {
                        "name": "with_urls",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also include assets infos and download-upload url"
                    },
                    {
                        "name": "with_only_token",
                        "in": "query",
                        "type": "boolean",
                        "description": "Only includes the access token. Will ignore with_urls if specified."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - asset correctly added"
                    },
                    "400": {
                        "description": "Bad request - wrong or missing parameters in query"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "403": {
                        "description": "Service doesn't have permission to post that asset"
                    }
                },
                "description": "Adds a new asset to the OpenTera database",
                "operationId": "post_service_query_assets",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/devices": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return device information.",
                "operationId": "get_service_query_devices",
                "parameters": [
                    {
                        "name": "device_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Device uuid of the device to query"
                    },
                    {
                        "name": "with_device_type",
                        "in": "query",
                        "type": "boolean",
                        "description": "Give more information about type",
                        "default": false
                    },
                    {
                        "name": "with_device_subtype",
                        "in": "query",
                        "type": "boolean",
                        "description": "Give more information about subtype",
                        "default": false
                    },
                    {
                        "name": "with_device_assets",
                        "in": "query",
                        "type": "boolean",
                        "description": "Give more information about assets",
                        "default": false
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Update device information",
                "operationId": "post_service_query_devices",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/service_device"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/disconnect": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - user/participant/device will be disconnected."
                    },
                    "400": {
                        "description": "No parameters specified at least one id / uuid must be used"
                    },
                    "403": {
                        "description": "Forbidden access. Please check that the service has access to the requested id/uuid."
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Disconnect user/participant/device from server.",
                "operationId": "get_service_query_disconnect",
                "parameters": [
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user to query"
                    },
                    {
                        "name": "user_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "User uuid of the device to query"
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant to query"
                    },
                    {
                        "name": "participant_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Participant uuid of the device to query"
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device to query"
                    },
                    {
                        "name": "device_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Device uuid of the device to query"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/participants": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return participant information.",
                "operationId": "get_service_query_participants",
                "parameters": [
                    {
                        "name": "participant_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Participant uuid of the participant to query"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - To be documented"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Logged user doesn't have permission to access the requested data"
                    }
                },
                "description": "Update participant",
                "operationId": "post_service_query_participants",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/participant"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/projects": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return projects information.",
                "operationId": "get_service_query_projects",
                "parameters": [
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project to query"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/services": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return services information.",
                "operationId": "get_service_query_services",
                "parameters": [
                    {
                        "name": "id_service",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the service to query"
                    },
                    {
                        "name": "uuid_service",
                        "in": "query",
                        "type": "string",
                        "description": "UUID of the service to query"
                    },
                    {
                        "name": "service_key",
                        "in": "query",
                        "type": "string",
                        "description": "Key of the service to query"
                    },
                    {
                        "name": "with_base_url",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also include base external URL for that service"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/sessions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return sessions information.",
                "operationId": "get_service_query_sessions",
                "parameters": [
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the session to query"
                    },
                    {
                        "name": "uuid_session",
                        "in": "query",
                        "type": "string",
                        "description": "UUID of the session to query"
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant to query"
                    },
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user to query"
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device to query"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "name": "with_events",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also includes session events"
                    },
                    {
                        "name": "with_session_type",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also includes session type information"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "type": "integer",
                        "description": "Limit to specific session status"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Maximum number of results to return"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Number of items to ignore in results, offset from 0-index"
                    },
                    {
                        "name": "start_date",
                        "in": "query",
                        "type": "string",
                        "format": "date",
                        "description": "Start date, sessions before that date will be ignored"
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "type": "string",
                        "format": "date",
                        "description": "End date, sessions after that date will be ignored"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Service can't create/update the specified session"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(session, id_session, session_participants_ids and/or session_users_ids[for new sessions]) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error when saving session"
                    }
                },
                "description": "Create / update session. id_session must be set to \"0\" to create a new session.",
                "operationId": "post_service_query_sessions",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_session"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/sessions/events": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of events"
                    },
                    "400": {
                        "description": "Required parameter is missing (id_session)"
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get events for a specific session",
                "operationId": "get_service_query_session_events",
                "parameters": [
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "ID of the session to query events for"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified event"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_session_event or id_session) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error when saving device"
                    }
                },
                "description": "Create / update session events. id_session_event must be set to \"0\" to create a new event. An event can be created/modified if the user has access to the session.",
                "operationId": "post_service_query_session_events",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/session_event"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/sessions/manager": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Required parameter is missing"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "501": {
                        "description": "Not implemented"
                    },
                    "403": {
                        "description": "Service doesn't have enough permission"
                    }
                },
                "description": "Manage a specific session",
                "operationId": "post_service_session_manager",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/session_manage"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/sessiontypes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return session types information for the current service",
                "operationId": "get_service_query_session_types",
                "parameters": [
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site to query session types for"
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project to query session types for"
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant to query types for"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/sites": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return sites information.",
                "operationId": "get_service_query_sites",
                "parameters": [
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site to query"
                    },
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user to query sites for"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/tests": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Service can't delete test"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific test",
                "operationId": "delete_service_query_tests",
                "parameters": [
                    {
                        "name": "uuid",
                        "in": "query",
                        "type": "string",
                        "required": true,
                        "description": "Test UUID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return tests information.",
                "operationId": "get_service_query_tests",
                "parameters": [
                    {
                        "name": "id_test",
                        "in": "query",
                        "type": "integer",
                        "description": "Specific ID of test to query information."
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to request all tests"
                    },
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of session from which to request all tests"
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of participant from which to request all tests"
                    },
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user from which to request all tests."
                    },
                    {
                        "name": "service_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Query all tests associated with that service uuid"
                    },
                    {
                        "name": "with_urls",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also include tests infos and download-upload url"
                    },
                    {
                        "name": "with_only_token",
                        "in": "query",
                        "type": "boolean",
                        "description": "Only includes the access token. Will ignore with_urls if specified."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - test correctly added"
                    },
                    "400": {
                        "description": "Bad request - wrong or missing parameters in query"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "403": {
                        "description": "Service doesn't have permission to post that test"
                    }
                },
                "description": "Adds a new test to the OpenTera database",
                "operationId": "post_service_query_tests",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/testtypes": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return test types information for the current service",
                "operationId": "get_service_query_test_types",
                "parameters": [
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site to query test types for"
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project to query test types for"
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant to query types for"
                    },
                    {
                        "name": "test_type_key",
                        "in": "query",
                        "type": "string",
                        "description": "Test type key to query for"
                    },
                    {
                        "name": "id_test_type",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the test type to query for"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/users": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return user information.",
                "operationId": "get_service_query_users",
                "parameters": [
                    {
                        "name": "user_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "User uuid of the user to query"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/service/users/access": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Required parameter is missing"
                    },
                    "501": {
                        "description": "Not implemented."
                    },
                    "403": {
                        "description": "Service doesn't have permission to access the requested data"
                    }
                },
                "description": "Return sessions information.",
                "operationId": "get_service_query_site_project_access_roles",
                "parameters": [
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project to query"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site to query"
                    },
                    {
                        "name": "uuid_user",
                        "in": "query",
                        "type": "string",
                        "required": true,
                        "description": "UUID of the user"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "service"
                ]
            }
        },
        "/user/assets": {
            "delete": {
                "responses": {
                    "501": {
                        "description": "Unable to delete asset information from here"
                    }
                },
                "description": "Delete asset.",
                "operationId": "delete_user_query_assets",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of assets"
                    },
                    "400": {
                        "description": "Required parameter is missing"
                    },
                    "403": {
                        "description": "Logged user doesn't have permission to access the requested data"
                    }
                },
                "description": "Get asset information. Only one of the ID parameter is supported at once",
                "operationId": "get_user_query_assets",
                "parameters": [
                    {
                        "name": "id_asset",
                        "in": "query",
                        "type": "integer",
                        "description": "Specific ID of asset to query information."
                    },
                    {
                        "name": "asset_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Specific UUID of asset to query information."
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to request all accessible assets"
                    },
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of session from which to request all assets"
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of participant from which to request all accessible assets"
                    },
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user from which to request all accessible assets."
                    },
                    {
                        "name": "service_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Query all assets associated with that service uuid"
                    },
                    {
                        "name": "id_creator_service",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the service from which to request all created assets."
                    },
                    {
                        "name": "id_creator_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user from which to request all created assets."
                    },
                    {
                        "name": "id_creator_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant from which to request all created assets."
                    },
                    {
                        "name": "id_creator_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to request all created assets."
                    },
                    {
                        "name": "with_urls",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also include assets infos and download-upload url"
                    },
                    {
                        "name": "with_only_token",
                        "in": "query",
                        "type": "boolean",
                        "description": "Only includes the access token. Will ignore with_urls if specified."
                    },
                    {
                        "name": "full",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also include names of sessions, users, services, ... in the reply"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "501": {
                        "description": "Unable to update asset information from here"
                    }
                },
                "description": "Delete asset.",
                "operationId": "post_user_query_assets",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/deviceparticipants": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete device association"
                    },
                    "500": {
                        "description": "Device-participant association not found or database error."
                    }
                },
                "description": "Delete a specific device-participant association.",
                "operationId": "delete_user_query_device_participants",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific device-participant association ID to delete. Be careful: this is not the device or the participant ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of devices - participants association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error occurred when loading devices for participant"
                    }
                },
                "description": "Get devices that are related to a participant. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_device_participants",
                "parameters": [
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to request all associated participants"
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant from which to request all associated devices"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site from which to get all devices and associated participants"
                    },
                    {
                        "name": "id_device_type",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of device type from which to get all devices and associated participants"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify device association"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_participant or id_device) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occured when saving device association"
                    }
                },
                "description": "Create/update devices associated with a participant.",
                "operationId": "post_user_query_device_participants",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_device_participant"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/deviceprojects": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete device association (no admin access to project or one of the device's site)"
                    },
                    "500": {
                        "description": "Device-project association not found or database error."
                    }
                },
                "description": "Delete a specific device-project association.",
                "operationId": "delete_user_query_device_projects",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific device-project association ID to delete. Be careful: this is not the device or the project ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of devices - project association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error occurred when loading devices for projects"
                    }
                },
                "description": "Get devices that are associated with a project. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_device_projects",
                "parameters": [
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to request all associated projects"
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project from which to get all associated devices"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "name": "with_projects",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_device. Also return projects that don't have any association with that device"
                    },
                    {
                        "name": "with_devices",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_project. Also return devices that don't have any association with that project"
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_device. Also return site information of the returned projects."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify device association - the user isn't admin of the project or current user can't access the device."
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_project or id_device) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occured when saving device association"
                    }
                },
                "description": "Create/update devices associated with a project.",
                "operationId": "post_user_query_device_projects",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_device_project"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/devices": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Wrong ID/ No ID"
                    },
                    "403": {
                        "description": "Logged user can't delete device (can delete if superadmin)"
                    },
                    "500": {
                        "description": "Device not found or database error."
                    }
                },
                "description": "Delete a specific device",
                "operationId": "delete_user_query_devices",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Device ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of devices"
                    },
                    "400": {
                        "description": "User Error : Too Many IDs"
                    },
                    "403": {
                        "description": "Forbidden access"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get devices information. Only one of the ID parameter is supported at once. If no ID is specified, returns all accessible devices for the logged user.",
                "operationId": "get_user_query_devices",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device to query"
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device to query"
                    },
                    {
                        "name": "device_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Device uuid of the device to query"
                    },
                    {
                        "name": "uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Alias for \"device_uuid\""
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site from which to get all associated devices"
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project from which to get all associated devices"
                    },
                    {
                        "name": "id_device_type",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of device type from which to get all devices. Can be combined with id_site or id_project."
                    },
                    {
                        "name": "id_device_subtype",
                        "in": "query",
                        "type": "integer",
                        "description": "Device subtype id to get all devices of that subtype."
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string",
                        "description": "Name of the device to query"
                    },
                    {
                        "name": "projects",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that indicates if associated project(s) information should be included in the returned device list"
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to the enabled devices."
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "name": "with_participants",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that indicates if associated participant(s) information should be included in the returned device list"
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that indicates if associated site(s) information should be included in the returned device list"
                    },
                    {
                        "name": "with_status",
                        "in": "query",
                        "type": "boolean",
                        "description": "Include status information - offline, online, busy for each device"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified device"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_device) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occurred when saving device"
                    }
                },
                "description": "Create / update devices. id_device must be set to \"0\" to create a new device. Only superadmins can create new devices, site admin can update and project admin can modify config and notes.",
                "operationId": "post_user_query_devices",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_device"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/devices/online": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get online devices uuids.",
                "operationId": "get_user_query_online_devices",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/devices/participants": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete device association"
                    },
                    "500": {
                        "description": "Device-participant association not found or database error."
                    }
                },
                "description": "Delete a specific device-participant association.",
                "operationId": "delete_user_query_device_participants",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific device-participant association ID to delete. Be careful: this is not the device or the participant ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of devices - participants association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error occurred when loading devices for participant"
                    }
                },
                "description": "Get devices that are related to a participant. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_device_participants",
                "parameters": [
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to request all associated participants"
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant from which to request all associated devices"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site from which to get all devices and associated participants"
                    },
                    {
                        "name": "id_device_type",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of device type from which to get all devices and associated participants"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify device association"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_participant or id_device) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occured when saving device association"
                    }
                },
                "description": "Create/update devices associated with a participant.",
                "operationId": "post_user_query_device_participants",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_device_participant"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/devices/projects": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete device association (no admin access to project or one of the device's site)"
                    },
                    "500": {
                        "description": "Device-project association not found or database error."
                    }
                },
                "description": "Delete a specific device-project association.",
                "operationId": "delete_user_query_device_projects",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific device-project association ID to delete. Be careful: this is not the device or the project ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of devices - project association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error occurred when loading devices for projects"
                    }
                },
                "description": "Get devices that are associated with a project. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_device_projects",
                "parameters": [
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to request all associated projects"
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project from which to get all associated devices"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "name": "with_projects",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_device. Also return projects that don't have any association with that device"
                    },
                    {
                        "name": "with_devices",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_project. Also return devices that don't have any association with that project"
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_device. Also return site information of the returned projects."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify device association - the user isn't admin of the project or current user can't access the device."
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_project or id_device) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occured when saving device association"
                    }
                },
                "description": "Create/update devices associated with a project.",
                "operationId": "post_user_query_device_projects",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_device_project"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/devices/sites": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete device association (no admin access to site)"
                    },
                    "500": {
                        "description": "Device-site association not found or database error."
                    }
                },
                "description": "Delete a specific device-site association.",
                "operationId": "delete_user_query_device_sites",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific device-site association ID to delete. Be careful: this is not the device or the site ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of devices - sites association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error occurred when loading devices for sites"
                    }
                },
                "description": "Get devices that are related to a site. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_device_sites",
                "parameters": [
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to request all associated sites"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site from which to get all associated devices"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "name": "with_devices",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_project. Also return devices that don't have any association with that project"
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_service. Also return site information of the returned projects."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify device association"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_site or id_device) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occured when saving device association"
                    }
                },
                "description": "Create/update devices associated with a site.",
                "operationId": "post_user_query_device_sites",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_device_site"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/devicesites": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete device association (no admin access to site)"
                    },
                    "500": {
                        "description": "Device-site association not found or database error."
                    }
                },
                "description": "Delete a specific device-site association.",
                "operationId": "delete_user_query_device_sites",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific device-site association ID to delete. Be careful: this is not the device or the site ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of devices - sites association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error occurred when loading devices for sites"
                    }
                },
                "description": "Get devices that are related to a site. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_device_sites",
                "parameters": [
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to request all associated sites"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site from which to get all associated devices"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "name": "with_devices",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_project. Also return devices that don't have any association with that project"
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_service. Also return site information of the returned projects."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify device association"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_site or id_device) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occured when saving device association"
                    }
                },
                "description": "Create/update devices associated with a site.",
                "operationId": "post_user_query_device_sites",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_device_site"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/devicesubtypes": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete device subtype (can delete if site admin)"
                    },
                    "500": {
                        "description": "Device subtype not found or database error."
                    }
                },
                "description": "Delete a specific device subtype",
                "operationId": "delete_user_query_device_sub_types",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Device subtype ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of devices subtypes"
                    },
                    "400": {
                        "description": "No parameters specified at least one id must be used"
                    },
                    "403": {
                        "description": "Forbidden access to the device type specified. Please check that the user has access to a session type containing that device type."
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get devices subtypes. Only one of the ID parameter is supported at once.",
                "operationId": "get_user_query_device_sub_types",
                "parameters": [
                    {
                        "name": "id_device_subtype",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device subtype to query"
                    },
                    {
                        "name": "id_device_type",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device type from which to get all subtypes"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Return minimal information"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified device subtype"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_device_subtype or id_device_type) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occured when saving device subtype"
                    }
                },
                "description": "Create / update devices subtypes. id_device_subtype must be set to \"0\" to create a new subtype. Only site admins can create new devices subtypes.",
                "operationId": "post_user_query_device_sub_types",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_device_subtype"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/devicetypes": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete device type (can delete if site admin)"
                    },
                    "500": {
                        "description": "Device type not found or database error."
                    },
                    "501": {
                        "description": "Tried to delete with 2 parameters"
                    }
                },
                "description": "Delete a specific device type",
                "operationId": "delete_user_query_device_types",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "description": "Device type ID to delete"
                    },
                    {
                        "name": "device_type_key",
                        "in": "query",
                        "type": "string",
                        "description": "Unique device key to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of devices types"
                    },
                    "400": {
                        "description": "No parameters specified at least one id must be used"
                    },
                    "403": {
                        "description": "Forbidden access to the device type specified. Please check that the user has access to a session type containing that device type."
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get devices types. Only one of the ID parameter is supported at once. The ID is dominant on the device_type_key",
                "operationId": "get_user_query_device_types",
                "parameters": [
                    {
                        "name": "id_device_type",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device type"
                    },
                    {
                        "name": "device_type_key",
                        "in": "query",
                        "type": "string",
                        "description": "Key of the device type"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "List of all device types"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified device type"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_device_name or id_device_type) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occured when saving device type"
                    }
                },
                "description": "Create / update devices types. id_device_type must be set to \"0\" to create a new type. Only site admins can create new devices types.",
                "operationId": "post_user_query_device_types",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/device_type"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/disconnect": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - user/participant/device will be disconnected."
                    },
                    "400": {
                        "description": "No parameters specified, at least one id / uuid must be used"
                    },
                    "403": {
                        "description": "Forbidden access. Please check that the user has access to the requested id/uuid."
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Disconnect user/participant/device from server. Use Logout for current user instead.",
                "operationId": "get_user_query_disconnect",
                "parameters": [
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user to query"
                    },
                    {
                        "name": "user_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "User uuid of the device to query"
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant to query"
                    },
                    {
                        "name": "participant_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Participant uuid of the device to query"
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device to query"
                    },
                    {
                        "name": "device_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Device uuid of the device to query"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/forms": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Missing required parameter"
                    },
                    "500": {
                        "description": "Unknown or unsupported data type"
                    }
                },
                "description": "Get json description of standard input form for the specified data type.",
                "operationId": "get_user_query_forms",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "type": "string",
                        "description": "Data type of the required form. Currently, the following data types are supported: \n device\ndevice_type\ndevice_subtype\ngroup\nparticipant\nproject\nservice\nservice_config\nsession\nsession_type\nsession_type_config\nsite\ntest_type\nuser\nuser_group\nversions\n"
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "description": "Specific id of subitem to query. Used to provide context to the returned form."
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "Specific id_project used to limit arrays list in some forms"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "Specific id_site used to limit arrays list in some forms"
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "type": "string",
                        "description": "Specific key of subitem to query. Used with service_config."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/groups": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete participant group (only project admin can delete)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific participant group",
                "operationId": "delete_user_query_participant_group",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Participant Group ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of participant groups"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get participant groups information. Only one of the ID parameter is supported at once. If no ID is specified, returns all accessible groups for the logged user",
                "operationId": "get_user_query_participant_group",
                "parameters": [
                    {
                        "name": "id_group",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant group to query"
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project from which to get all participant groups"
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "description": "Alias for \"id_group\""
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified device"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_participant_group or id_project) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occurred when saving device"
                    }
                },
                "description": "Create / update participant groups. id_participant_group must be set to \"0\" to create a new group. A group can be created/modified if the user has admin rights to the project.",
                "operationId": "post_user_query_participant_group",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_participant_group"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/login": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Login to the server using HTTP Basic Authentification (HTTPAuth)",
                "operationId": "get_user_login",
                "parameters": [
                    {
                        "name": "with_websocket",
                        "in": "query",
                        "type": "boolean",
                        "description": "If set, requires that a websocket url is returned.If not possible to do so, return a 403 error."
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/logout": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Logout from the server",
                "operationId": "get_user_logout",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/participants": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete participant (only project admin can delete)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific participant",
                "operationId": "delete_user_query_participants",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Participant ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of participants"
                    },
                    "400": {
                        "description": "No parameters specified at least one id must be used"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get participants information. Only one of the ID parameter is supported and required at once",
                "operationId": "get_user_query_participants",
                "parameters": [
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant to query"
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "description": "Alias for \"id_participant\""
                    },
                    {
                        "name": "username",
                        "in": "query",
                        "type": "string",
                        "description": "Username of the participant to query"
                    },
                    {
                        "name": "participant_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Participant uuid of the participant to query"
                    },
                    {
                        "name": "uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Alias for \"participant_uuid\""
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site from which to get all participants"
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project from which to get all participants"
                    },
                    {
                        "name": "id_group",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant groups from which to get all participants"
                    },
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the session from which to get all participants"
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to get all participants associated"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string",
                        "description": "Name of the participant to query"
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to the enabled participants"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "name": "full",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that expands the returned data to include all information"
                    },
                    {
                        "name": "orderby_recents",
                        "in": "query",
                        "type": "boolean",
                        "description": "Returns participants ordered by most recently updated"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Returns at most \"limit\" participants"
                    },
                    {
                        "name": "no_group",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data with only participants without a group"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified participant"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_participant or id_project/id_group [only one of them]) in the JSON body, or mismatch between id_project and participant group project"
                    },
                    "500": {
                        "description": "Internal error when saving participant"
                    }
                },
                "description": "Create / update participants. id_participant must be set to \"0\" to create a new participant. A participant can be created/modified if the user has admin rights to the project.",
                "operationId": "post_user_query_participants",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_participant"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/participants/online": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get online participants uuids.",
                "operationId": "get_user_query_online_participants",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/projectaccess": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete project access(only user who is admin in that project can remove it)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific project access",
                "operationId": "delete_user_query_project_access",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Project Access ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of users roles in projects"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error occured when loading project roles"
                    }
                },
                "description": "Get user roles for projects. Only one ID parameter required and supported at once.",
                "operationId": "get_user_query_project_access",
                "parameters": [
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user from which to request all projects roles"
                    },
                    {
                        "name": "id_user_group",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user group from which to request all projects roles"
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project from which to request all users groups roles"
                    },
                    {
                        "name": "admins",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag to limit to projects from which the user is an admin or users in project that have the admin role"
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Include sites information for each project."
                    },
                    {
                        "name": "by_users",
                        "in": "query",
                        "type": "boolean",
                        "description": "If specified, returns roles by users instead of by usergroups"
                    },
                    {
                        "name": "with_empty",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_user_group. Also return projects that don't have any access with that user group. Used with id_project. also return user groups that don't have any access to the project"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify this project or user access (project admin access required)"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_user_group or id_project) in the JSON body"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Create/update project access for an user.",
                "operationId": "post_user_query_project_access",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_project_access"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/projects": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete project (only site admin can delete)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific project",
                "operationId": "delete_user_query_projects",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Project ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of participants"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get projects information. Only one of the ID parameter is supported and required at once",
                "operationId": "get_user_query_projects",
                "parameters": [
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project to query"
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "description": "Alias for \"id_project\""
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site from which to get all projects"
                    },
                    {
                        "name": "id_service",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the service from which to get all projects"
                    },
                    {
                        "name": "user_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "User UUID from which to get all projects that are accessible"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string",
                        "description": "Project to query by name"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified project"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_site or id_project) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occured when saving project"
                    }
                },
                "description": "Create / update projects. id_project must be set to \"0\" to create a new project. A project can be created/modified if the user has admin rights to the related site.",
                "operationId": "post_user_query_projects",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_project"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/refresh_token": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Server error"
                    }
                },
                "description": "Refresh token, old token needs to be passed in request headers.",
                "operationId": "get_user_refresh_token",
                "parameters": [
                    {
                        "name": "with_websocket",
                        "in": "query",
                        "type": "boolean",
                        "description": "If set, requires that a websocket url is returned.If not possible to do so, return a 403 error."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/services": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Service doesn't exists"
                    },
                    "403": {
                        "description": "Logged user can't delete service (only super admins can delete) or service is a system service"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific service",
                "operationId": "delete_user_query_services",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Service ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of services"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get services information. Only one of the ID parameter is supported and required at once.",
                "operationId": "get_user_query_services",
                "parameters": [
                    {
                        "name": "id_service",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the service to query"
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project to query services from"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site to query services from"
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "description": "Alias for \"id_service\""
                    },
                    {
                        "name": "service_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Service UUID to query"
                    },
                    {
                        "name": "uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Alias for \"service_uuid\""
                    },
                    {
                        "name": "service_key",
                        "in": "query",
                        "type": "string",
                        "description": "Service Key to query"
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "type": "string",
                        "description": "Alias for \"service_key\""
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "name": "with_config",
                        "in": "query",
                        "type": "boolean",
                        "description": "Only return services with editable configuration"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified service"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_service) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occured when saving service"
                    }
                },
                "description": "Create / update services. id_service must be set to \"0\" to create a new service. A service can be created/modified only by super-admins. If data contains \"roles\", also update the roles with the list.",
                "operationId": "post_user_query_services",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_service"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/services/access": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete association (not admin of the associated elements)"
                    },
                    "500": {
                        "description": "Association not found or database error."
                    }
                },
                "description": "Delete a specific service access.",
                "operationId": "delete_user_query_service_access",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific service access ID to delete. Be careful: this is not the service or service role ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of access roles"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error when getting association"
                    }
                },
                "description": "Get access roles for a specific items. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_service_access",
                "parameters": [
                    {
                        "name": "id_user_group",
                        "in": "query",
                        "type": "integer",
                        "description": "Usergroup ID to query service access"
                    },
                    {
                        "name": "id_participant_group",
                        "in": "query",
                        "type": "integer",
                        "description": "Participant group ID to query service access"
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "Device ID to query service access"
                    },
                    {
                        "name": "id_service",
                        "in": "query",
                        "type": "integer",
                        "description": "Service ID to query associated access from"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify association (only site admin can modify association)"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_project or id_service) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occurred when saving association"
                    }
                },
                "description": "Create/update service - access association.",
                "operationId": "post_user_query_service_access",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_service_access"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/services/configs": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete config (must have admin access to the related object - user,device or participant, or be its own config)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific session",
                "operationId": "delete_user_query_service_config",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Service config ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of configurations"
                    },
                    "400": {
                        "description": "No parameters specified - id_service is at least required"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get service configuration. id_service can be combined with id_user, id_participant or id_device, if required. If no id_user, id_participant and id_device specified, will return config the current user.",
                "operationId": "get_user_query_service_config",
                "parameters": [
                    {
                        "name": "id_service",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of service to get all configs from. Use in combination with another ID field to filter."
                    },
                    {
                        "name": "service_key",
                        "in": "query",
                        "type": "string",
                        "description": "Service key to query. Can be used instead of id_service. If usedwith id_service, service_key will be ignored."
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant from which to get the service specified with id_service or all configs"
                    },
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user from which to get the service specified with id_service or all configs"
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to get the service specified with id_service or all configs"
                    },
                    {
                        "name": "id_specific",
                        "in": "query",
                        "type": "string",
                        "description": "ID of the specific configuration to get."
                    },
                    {
                        "name": "with_empty",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also include empty configs for services without config."
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also includes a list of all available specifics configs."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified session"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(service_config, id_service_config, id_service) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error when saving service config"
                    }
                },
                "description": "Create / update service config. id_service_config must be set to \"0\" to create a new config. A config can be created/modified if the user has admin access to the user, device or participant",
                "operationId": "post_user_query_service_config",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/service_config"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/services/projects": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete association (not site admin of the associated project)"
                    },
                    "500": {
                        "description": "Association not found or database error."
                    }
                },
                "description": "Delete a specific service - project association.",
                "operationId": "delete_user_query_service_projects",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific service - project association ID to delete. Be careful: this is not the service or project ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of services - projects association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error when getting association"
                    }
                },
                "description": "Get services that are associated with a project. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_service_projects",
                "parameters": [
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "Project ID to query associated services"
                    },
                    {
                        "name": "id_service",
                        "in": "query",
                        "type": "integer",
                        "description": "Service ID to query associated projects from"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "name": "with_projects",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_service. Also return projects that don't have any association with that service"
                    },
                    {
                        "name": "with_services",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_project. Also return services that don't have any association with that project"
                    },
                    {
                        "name": "with_roles",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_project. Returns detailled information oneach role for this service."
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_service. Also return site information of the returned projects."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify association (only site admin can modify association)"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_project or id_service) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occurred when saving association"
                    }
                },
                "description": "Create/update service - project association. If a \"service\" json is received, the list of \"projects\" is replaced. If a \"project\" json is received, the list of \"services\" is replaced.If a \"service_project\" is received, each of the item in the list is added.",
                "operationId": "post_user_query_service_projects",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/service_project"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/services/sites": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete association (only super admins can)"
                    },
                    "500": {
                        "description": "Association not found or database error."
                    }
                },
                "description": "Delete a specific service - site association.",
                "operationId": "delete_user_query_service_sites",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific service - site association ID to delete. Be careful: this is not the service or site ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of services - sites association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error when getting association"
                    }
                },
                "description": "Get services that are associated with a site. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_service_sites",
                "parameters": [
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "Site ID to query associated services"
                    },
                    {
                        "name": "id_service",
                        "in": "query",
                        "type": "integer",
                        "description": "Service ID to query associated projects from"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_service. Also return sites that don't have any association with that service"
                    },
                    {
                        "name": "with_services",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_site. Also return services that don't have any association with that site"
                    },
                    {
                        "name": "with_roles",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_site. Returns detailed information oneach role for this service."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify association (only super admin can modify association)"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_project or id_service) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occurred when saving association"
                    }
                },
                "description": "Create/update service - site association. If a \"service\" json is received, the list of \"sites\" is replaced. If a \"site\" json is received, the list of \"services\" is replaced.If a \"service_site\" is received, each of the item in the list is added.",
                "operationId": "post_user_query_service_sites",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/service_site"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/sessions": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete session (must have access to all participants and users in the session to delete)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific session",
                "operationId": "delete_user_query_sessions",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Session ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of sessions"
                    },
                    "400": {
                        "description": "No parameters specified at least one id must be used"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get sessions information. Only one of the ID parameter is supported and required at once",
                "operationId": "get_user_query_sessions",
                "parameters": [
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the session to query"
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant from which to get all sessions"
                    },
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user from which to get all sessions"
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to get all sessions"
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "type": "integer",
                        "description": "Limit to specific session status"
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "type": "integer",
                        "description": "Maximum number of results to return"
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "type": "integer",
                        "description": "Number of items to ignore in results, offset from 0-index"
                    },
                    {
                        "name": "session_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Session UUID to query"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "name": "start_date",
                        "in": "query",
                        "type": "string",
                        "format": "date",
                        "description": "Start date, sessions before that date will be ignored"
                    },
                    {
                        "name": "end_date",
                        "in": "query",
                        "type": "string",
                        "format": "date",
                        "description": "End date, sessions after that date will be ignored"
                    },
                    {
                        "name": "with_session_type",
                        "in": "query",
                        "type": "boolean",
                        "description": "Include session type informations"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified session"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(session, id_session, session_participants_ids and/or session_users_ids[for new sessions]) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error when saving session"
                    }
                },
                "description": "Create / update session. id_session must be set to \"0\" to create a new session. A session can be created/modified if the user has access to all participants and users in the session.",
                "operationId": "post_user_query_sessions",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_session"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/sessions/events": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete event (no access to that session)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific session event",
                "operationId": "delete_user_query_session_events",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Session event ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of events"
                    },
                    "400": {
                        "description": "Required parameter is missing (id_session)"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get events for a specific session",
                "operationId": "get_user_query_session_events",
                "parameters": [
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "ID of the session to query events for"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified event"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_session_event or id_session) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error when saving device"
                    }
                },
                "description": "Create / update session events. id_session_event must be set to \"0\" to create a new event. An event can be created/modified if the user has access to the session.",
                "operationId": "post_user_query_session_events",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_session_event"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/sessions/manager": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Required parameter is missing"
                    },
                    "500": {
                        "description": "Internal server error"
                    },
                    "501": {
                        "description": "Not implemented"
                    },
                    "403": {
                        "description": "Logged user doesn't have enough permission"
                    }
                },
                "description": "Manage a specific session",
                "operationId": "post_user_session_manager",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/session_manage"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/sessiontypeprojects": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete association (no access to session-type or project)"
                    },
                    "400": {
                        "description": "Association not found (invalid id?)"
                    }
                },
                "description": "Delete a specific session-type - project association.",
                "operationId": "delete_user_query_session_type_projects",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific device-type - project association ID to delete. Be careful: this is not the session-type or project ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of devices-types - projects association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error when getting association"
                    }
                },
                "description": "Get devices types that are associated with a project. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_session_type_projects",
                "parameters": [
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "Project ID to query associated session types from"
                    },
                    {
                        "name": "id_session_type",
                        "in": "query",
                        "type": "integer",
                        "description": "Session type ID to query associated projects from"
                    },
                    {
                        "name": "with_projects",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_session_type. Also return projects that don't have any association with that type"
                    },
                    {
                        "name": "with_session_type",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_project. Also return types that don't have any association with that project"
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_session_type. Also return site information of the returned projects."
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify association (session type must be accessible from project access)"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_project or id_session_type) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occurred when saving association"
                    }
                },
                "description": "Create/update session-type - project association.",
                "operationId": "post_user_query_session_type_projects",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_session_type_project"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/sessiontypes": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete session type (no admin access to project related to that type or sessions of that type exists in the system somewhere)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific session type",
                "operationId": "delete_user_query_session_types",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Session type ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of session types"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get session type information. If no id_session_type specified, returns all available session types",
                "operationId": "get_user_query_session_types",
                "parameters": [
                    {
                        "name": "id_session_type",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the session type to query"
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project to get session type for"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site to get session types for"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified session type"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing field(id_session_type) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error when saving session type"
                    }
                },
                "description": "Create / update session type. id_session_type must be set to \"0\" to create a new type. A session type can be created/modified if the user has access to a related session typeproject.",
                "operationId": "post_user_query_session_types",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_session_type"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/sessiontypes/projects": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete association (no access to session-type or project)"
                    },
                    "400": {
                        "description": "Association not found (invalid id?)"
                    }
                },
                "description": "Delete a specific session-type - project association.",
                "operationId": "delete_user_query_session_type_projects",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific device-type - project association ID to delete. Be careful: this is not the session-type or project ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of devices-types - projects association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error when getting association"
                    }
                },
                "description": "Get devices types that are associated with a project. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_session_type_projects",
                "parameters": [
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "Project ID to query associated session types from"
                    },
                    {
                        "name": "id_session_type",
                        "in": "query",
                        "type": "integer",
                        "description": "Session type ID to query associated projects from"
                    },
                    {
                        "name": "with_projects",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_session_type. Also return projects that don't have any association with that type"
                    },
                    {
                        "name": "with_session_type",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_project. Also return types that don't have any association with that project"
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_session_type. Also return site information of the returned projects."
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify association (session type must be accessible from project access)"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_project or id_session_type) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occurred when saving association"
                    }
                },
                "description": "Create/update session-type - project association.",
                "operationId": "post_user_query_session_type_projects",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_session_type_project"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/sessiontypes/sites": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete association (no admin access to site)"
                    },
                    "500": {
                        "description": "Session type - site association not found or database error."
                    }
                },
                "description": "Delete a specific session type-site association.",
                "operationId": "delete_user_query_session_type_sites",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific session type-site association ID to delete. Be careful: this is not the session type or the site ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of session types - sites association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error occurred when loading devices for sites"
                    }
                },
                "description": "Get session types that are related to a site. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_session_type_sites",
                "parameters": [
                    {
                        "name": "id_session_type",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the session type from which to request all associated sites"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site from which to get all associated session types"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "name": "with_session_type",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_session_type. Also return session types that don't have any association with that site"
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_service. Also return site information of the returned projects."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify device association"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_site or id_device) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occured when saving device association"
                    }
                },
                "description": "Create/update session types associated with a site.",
                "operationId": "post_user_query_session_type_sites",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_session_type_site"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/siteaccess": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete site access(only user who is admin in that site can remove it)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific site access",
                "operationId": "delete_user_query_site_access",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Site Access ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of users roles in sites"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error occurred when loading sites roles"
                    }
                },
                "description": "Get user roles for sites. Only one  parameter required and supported at once.",
                "operationId": "get_user_query_site_access",
                "parameters": [
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user from which to request all site roles"
                    },
                    {
                        "name": "id_user_group",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user group from which to request all site roles"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site from which to request all user groups roles"
                    },
                    {
                        "name": "admins",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag to limit to sites from which the user group is an admin or users in site that have the admin role"
                    },
                    {
                        "name": "by_users",
                        "in": "query",
                        "type": "boolean",
                        "description": "If specified, returns roles by users instead of by usergroups"
                    },
                    {
                        "name": "with_usergroups",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used With the \"by_users\" parameter, it instead returns the usergroups of each user."
                    },
                    {
                        "name": "with_empty",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_site, also return user or user groups that don't have any access to the site. Used with id_user_group, also return sites that don't have any access with that user group"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify this site or user access (site admin access required)"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_user or id_site) in the JSON body"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Create/update site access for a user group.",
                "operationId": "post_user_query_site_access",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_site_access"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/sites": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete site (only super admin can delete)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific site",
                "operationId": "delete_user_query_sites",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Site ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of sites"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get site information. Only one of the ID parameter is supported and required at once",
                "operationId": "get_user_query_sites",
                "parameters": [
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site to query"
                    },
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "description": "Alias for \"id_site\""
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to get all related sites"
                    },
                    {
                        "name": "user_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "User UUID from which to get all sites that are accessible"
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "type": "string",
                        "description": "Site name to query"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified site"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing field(id_site) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error when saving site"
                    }
                },
                "description": "Create / update site. id_site must be set to \"0\" to create a new site. A site can be created/modified if the user has admin rights to the site itself or issuperadmin.",
                "operationId": "post_user_query_sites",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_site"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/stats": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Missing parameter - one id must be specified."
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get stats for the specified item.",
                "operationId": "get_user_query_user_stats",
                "parameters": [
                    {
                        "name": "id_user_group",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user group to query stats for."
                    },
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user to query stats for."
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site to query stats for."
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project to query stats for."
                    },
                    {
                        "name": "id_group",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant group to query stats for."
                    },
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the session to query stats for."
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the participant to query stats for."
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device to query stats for."
                    },
                    {
                        "name": "with_participants",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also includes related participants stats. Can not be used with \"id_participant\", \"id_user_group\", \"id_session\", \"id_user\" or \"id_device\"."
                    },
                    {
                        "name": "with_warnings",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also include warning information such as a participant not having sessions for some time or users not having logged on for some time. Can only be used with \"id_site\" for now."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/tests": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete test"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific test",
                "operationId": "delete_user_query_tests",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Test type ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of assets"
                    },
                    "400": {
                        "description": "Required parameter is missing"
                    },
                    "403": {
                        "description": "Logged user doesn't have permission to access the requested data"
                    }
                },
                "description": "Get test information. Only one of the ID parameter is supported at once",
                "operationId": "get_user_query_tests",
                "parameters": [
                    {
                        "name": "id_test",
                        "in": "query",
                        "type": "integer",
                        "description": "Specific ID of test to query information."
                    },
                    {
                        "name": "test_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Specific UUID of test to query information."
                    },
                    {
                        "name": "id_device",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the device from which to request all tests"
                    },
                    {
                        "name": "id_session",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of session from which to request all tests"
                    },
                    {
                        "name": "id_participant",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of participant from which to request all tests"
                    },
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user from which to request all tests."
                    },
                    {
                        "name": "with_urls",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also include tests results url"
                    },
                    {
                        "name": "with_only_token",
                        "in": "query",
                        "type": "boolean",
                        "description": "Only includes the access token. Will ignore with_urls if specified."
                    },
                    {
                        "name": "full",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also include names of sessions, users, services, ... in the reply"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "501": {
                        "description": "Unable to update test from here - use service!"
                    }
                },
                "description": "Delete test.",
                "operationId": "post_user_query_tests",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/testtypes": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete test type (no admin access to project related to that type or tests of that type exists in the system somewhere)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific test type",
                "operationId": "delete_user_query_test_types",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Test type ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of test types"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get test type information. If no id_test_type specified, returns all available test types",
                "operationId": "get_user_query_test_types",
                "parameters": [
                    {
                        "name": "id_test_type",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the test type to query"
                    },
                    {
                        "name": "test_type_key",
                        "in": "query",
                        "type": "string",
                        "description": "Key of the test type to query"
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project to get test types for"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site to get test types for"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "name": "with_urls",
                        "in": "query",
                        "type": "boolean",
                        "description": "Also include test types urls"
                    },
                    {
                        "name": "with_only_token",
                        "in": "query",
                        "type": "boolean",
                        "description": "Only includes the access token. Will ignore with_urls if specified."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified test type"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing field in the JSON body"
                    },
                    "500": {
                        "description": "Internal error when saving test type"
                    }
                },
                "description": "Create / update test type. id_test_type must be set to \"0\" to create a new type. A test type can be created/modified if the user has access to a related test typeproject.",
                "operationId": "post_user_query_test_types",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_test_type"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/testtypes/projects": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete association (no access to test-type or project)"
                    },
                    "400": {
                        "description": "Association not found (invalid id?)"
                    }
                },
                "description": "Delete a specific test-type - project association.",
                "operationId": "delete_user_query_test_type_projects",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific test type - project association ID to delete. Be careful: this is not the test-type or project ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of test-types - projects association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error when getting association"
                    }
                },
                "description": "Get test types that are associated with a project. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_test_type_projects",
                "parameters": [
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "Project ID to query associated test types from"
                    },
                    {
                        "name": "id_test_type",
                        "in": "query",
                        "type": "integer",
                        "description": "Test type ID to query associated projects from"
                    },
                    {
                        "name": "with_projects",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_test_type. Also return projects that don't have any association with that type"
                    },
                    {
                        "name": "with_test_types",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_project. Also return types that don't have any association with that project"
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_test_type. Also return site information of the returned projects."
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify association (project admin access required)"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occurred when saving association"
                    }
                },
                "description": "Create/update test-type - project association.",
                "operationId": "post_user_query_test_type_projects",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_test_type_project"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/testtypes/sites": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete association (no admin access to site)"
                    },
                    "500": {
                        "description": "Session type - site association not found or database error."
                    }
                },
                "description": "Delete a specific test type-site association.",
                "operationId": "delete_user_query_test_type_sites",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "Specific test type-site association ID to delete. Be careful: this is not the test type or the site ID, but the ID of the association itself!"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of session types - sites association"
                    },
                    "400": {
                        "description": "Required parameter is missing (must have at least one id)"
                    },
                    "500": {
                        "description": "Error occured when loading devices for sites"
                    }
                },
                "description": "Get session types that are related to a site. Only one \"ID\" parameter required and supported at once.",
                "operationId": "get_user_query_test_type_sites",
                "parameters": [
                    {
                        "name": "id_test_type",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the test type from which to request all associated sites"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site from which to get all associated test types"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ids only)"
                    },
                    {
                        "name": "with_test_types",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_test_type. Also return test types that don't have any association with that site"
                    },
                    {
                        "name": "with_sites",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_site. Also return site information of the returned test types."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't modify association"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(id_site or id_test_type) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occurred when saving device association"
                    }
                },
                "description": "Create/update test types associated with a site.",
                "operationId": "post_user_query_test_type_sites",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_test_type_site"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/usergroups": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete user group (only a site admin that includes that user group in their site can delete)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific user group",
                "operationId": "delete_user_query_user_groups",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "User group ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get user group information. If no id specified, returns all accessible users groups",
                "operationId": "get_user_query_user_groups",
                "parameters": [
                    {
                        "name": "id_user_group",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user group to query"
                    },
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user to get all user groups"
                    },
                    {
                        "name": "id_site",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the site to get all user groups with access in that site"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified user group"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing field(id_user_group) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error when saving user group"
                    }
                },
                "description": "Create / update user group. id_user_group must be set to \"0\" to create a new user group. User groups can be modified has a site admin role.",
                "operationId": "post_user_query_user_groups",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_group"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/users": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete user (only super admin can delete)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific user",
                "operationId": "delete_user_query_users",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "User ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get user information. If no id specified, returns all accessible users",
                "operationId": "get_user_query_users",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user to query"
                    },
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user to query"
                    },
                    {
                        "name": "id_user_group",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user group to get all users from"
                    },
                    {
                        "name": "id_project",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the project to get all users that has access to it"
                    },
                    {
                        "name": "user_uuid",
                        "in": "query",
                        "type": "string",
                        "description": "User UUID to query"
                    },
                    {
                        "name": "uuid",
                        "in": "query",
                        "type": "string",
                        "description": "Alias for \"user_uuid\""
                    },
                    {
                        "name": "username",
                        "in": "query",
                        "type": "string",
                        "description": "Username of the user to query"
                    },
                    {
                        "name": "self",
                        "in": "query",
                        "type": "boolean",
                        "description": "Query information about the currently logged user"
                    },
                    {
                        "name": "enabled",
                        "in": "query",
                        "type": "boolean",
                        "description": "Only returns users with the specified enabled status"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information (ID, name, enabled)"
                    },
                    {
                        "name": "with_usergroups",
                        "in": "query",
                        "type": "boolean",
                        "description": "Include usergroups information for each user."
                    },
                    {
                        "name": "with_status",
                        "in": "query",
                        "type": "boolean",
                        "description": "Include status information - offline, online, busy for each user"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified user"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing field(id_user or missing password when new user) in the JSON body"
                    },
                    "409": {
                        "description": "Username is already taken"
                    },
                    "500": {
                        "description": "Internal error when saving user"
                    }
                },
                "description": "Create / update user. id_user must be set to \"0\" to create a new user. User can be modified if: current user is super admin or user is part of a project which the current user is admin. Promoting a user to super admin is restricted to super admins.\"If data contains \"user_user_groups, also set user groups for that user.",
                "operationId": "post_user_query_users",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_user"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/users/online": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }
                },
                "description": "Get online users informations.",
                "operationId": "get_user_query_online_users",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/users/preferences": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of user preferences"
                    },
                    "400": {
                        "description": "Missing parameter or bad app_tag"
                    },
                    "403": {
                        "description": "Forbidden access to that user."
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get user preferences. If no id_user field specified, returns preferences for current user.",
                "operationId": "get_user_query_user_preferences",
                "parameters": [
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user to get preference for"
                    },
                    {
                        "name": "app_tag",
                        "in": "query",
                        "type": "string",
                        "description": "Tag of the application for which to get preferences"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the user linked to that preference"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing fields(app_tag) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error occurred when saving user preference"
                    }
                },
                "description": "Create / update user preferences. Only one preference is allowed for a specific app_tag. Preference will be overwritten if app_tag already exists for the user, and will be deleted if empty or null. If id_user isn't set, will update current user preferences",
                "operationId": "post_user_query_user_preferences",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_preference"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/users/usergroups": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't delete user group (only a site admin that includes that user group in their site can delete)"
                    },
                    "500": {
                        "description": "Database error."
                    }
                },
                "description": "Delete a specific user - user group relationship",
                "operationId": "delete_user_query_user_user_groups",
                "parameters": [
                    {
                        "name": "id",
                        "in": "query",
                        "type": "integer",
                        "required": true,
                        "description": "User - User group relationship ID to delete"
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "500": {
                        "description": "Database error"
                    }
                },
                "description": "Get user - user group information. At least one \"id\" field must be specified",
                "operationId": "get_user_query_user_user_groups",
                "parameters": [
                    {
                        "name": "id_user_group",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user group to query"
                    },
                    {
                        "name": "id_user",
                        "in": "query",
                        "type": "integer",
                        "description": "ID of the user to get all user groups"
                    },
                    {
                        "name": "list",
                        "in": "query",
                        "type": "boolean",
                        "description": "Flag that limits the returned data to minimal information"
                    },
                    {
                        "name": "with_empty",
                        "in": "query",
                        "type": "boolean",
                        "description": "Used with id_user, also returns users groups that the user is not part of. Used with id_user_group, also returns users not part of that user group."
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    },
                    "403": {
                        "description": "Logged user can't create/update the specified user group"
                    },
                    "400": {
                        "description": "Badly formed JSON or missing field(id_user_group) in the JSON body"
                    },
                    "500": {
                        "description": "Internal error when saving user group"
                    }
                },
                "description": "Create / update user - user group relationship, creating it if it doesn't exist, updating it otherwise.",
                "operationId": "post_user_query_user_user_groups",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/user_user_group"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        },
        "/user/versions": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success - returns list of assets"
                    },
                    "400": {
                        "description": "Required parameter is missing"
                    },
                    "403": {
                        "description": "Logged user doesn't have permission to access the requested data"
                    }
                },
                "description": "Get server versions",
                "operationId": "get_user_query_versions",
                "parameters": [
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            },
            "post": {
                "responses": {
                    "200": {
                        "description": "Success - asset posted"
                    },
                    "500": {
                        "description": "Database error occurred"
                    },
                    "403": {
                        "description": "Logged user doesn't have permission to delete the requested asset (must be an user ofthe related project)"
                    }
                },
                "description": "Post server versions",
                "operationId": "post_user_query_versions",
                "parameters": [
                    {
                        "name": "payload",
                        "required": true,
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/ClientVersions"
                        }
                    },
                    {
                        "description": "Secret token",
                        "name": "token",
                        "type": "string",
                        "in": "query"
                    }
                ],
                "tags": [
                    "user"
                ]
            }
        }
    },
    "info": {
        "title": "OpenTeraServer API",
        "version": "OpenTera_v1.2.0",
        "description": "TeraServer API Documentation"
    },
    "produces": [
        "application/json"
    ],
    "consumes": [
        "application/json"
    ],
    "securityDefinitions": {
        "HTTPAuth": {
            "type": "basic",
            "in": "header"
        },
        "Token Authentication": {
            "type": "apiKey",
            "in": "header",
            "name": "Authorization",
            "default": "OpenTera",
            "bearerFormat": "JWT"
        }
    },
    "tags": [
        {
            "name": "user",
            "description": "API for user calls"
        },
        {
            "name": "device",
            "description": "API for device calls"
        },
        {
            "name": "participant",
            "description": "API for participant calls"
        },
        {
            "name": "service",
            "description": "API for service calls"
        }
    ],
    "definitions": {
        "user_device": {
            "properties": {
                "device": {
                    "properties": {
                        "device_certificate": {
                            "type": "string",
                            "required": false
                        },
                        "device_config": {
                            "type": "string",
                            "required": false
                        },
                        "device_enabled": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "device_infos": {
                            "type": "string",
                            "required": false
                        },
                        "device_lastonline": {
                            "type": "string",
                            "required": false,
                            "format": "date-time"
                        },
                        "device_name": {
                            "type": "string",
                            "required": true
                        },
                        "device_notes": {
                            "type": "string",
                            "required": false
                        },
                        "device_onlineable": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "device_token": {
                            "type": "string",
                            "required": false
                        },
                        "device_uuid": {
                            "type": "string",
                            "required": true,
                            "format": "uuid"
                        },
                        "id_device": {
                            "type": "integer",
                            "required": true
                        },
                        "id_device_subtype": {
                            "type": "integer",
                            "required": false
                        },
                        "id_device_type": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_device_site": {
            "properties": {
                "device_site": {
                    "properties": {
                        "id_device": {
                            "type": "integer",
                            "required": true
                        },
                        "id_device_site": {
                            "type": "integer",
                            "required": true
                        },
                        "id_site": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_device_project": {
            "properties": {
                "device_project": {
                    "properties": {
                        "id_device": {
                            "type": "integer",
                            "required": true
                        },
                        "id_device_project": {
                            "type": "integer",
                            "required": true
                        },
                        "id_project": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_device_participant": {
            "properties": {
                "device_participant": {
                    "properties": {
                        "id_device": {
                            "type": "integer",
                            "required": true
                        },
                        "id_device_participant": {
                            "type": "integer",
                            "required": true
                        },
                        "id_participant": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "device_type": {
            "properties": {
                "device_type": {
                    "properties": {
                        "device_type_key": {
                            "type": "string",
                            "required": true
                        },
                        "device_type_name": {
                            "type": "string",
                            "required": true
                        },
                        "id_device_type": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_device_subtype": {
            "properties": {
                "device_subtype": {
                    "properties": {
                        "device_subtype_name": {
                            "type": "string",
                            "required": true
                        },
                        "id_device_subtype": {
                            "type": "integer",
                            "required": true
                        },
                        "id_device_type": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_participant_group": {
            "properties": {
                "participant_group": {
                    "properties": {
                        "id_participant_group": {
                            "type": "integer",
                            "required": true
                        },
                        "id_project": {
                            "type": "integer",
                            "required": true
                        },
                        "participant_group_name": {
                            "type": "string",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_participant": {
            "properties": {
                "participant": {
                    "properties": {
                        "id_participant": {
                            "type": "integer",
                            "required": true
                        },
                        "id_participant_group": {
                            "type": "integer",
                            "required": false
                        },
                        "id_project": {
                            "type": "integer",
                            "required": true
                        },
                        "participant_email": {
                            "type": "string",
                            "required": false
                        },
                        "participant_enabled": {
                            "type": "boolean",
                            "required": true,
                            "default": true
                        },
                        "participant_lastonline": {
                            "type": "string",
                            "required": false,
                            "format": "date-time"
                        },
                        "participant_login_enabled": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "participant_name": {
                            "type": "string",
                            "required": true
                        },
                        "participant_password": {
                            "type": "string",
                            "required": false
                        },
                        "participant_token": {
                            "type": "string",
                            "required": false
                        },
                        "participant_token_enabled": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "participant_username": {
                            "type": "string",
                            "required": false
                        },
                        "participant_uuid": {
                            "type": "string",
                            "required": true,
                            "format": "uuid"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_project_access": {
            "properties": {
                "project_access": {
                    "properties": {
                        "id_project": {
                            "type": "integer",
                            "required": true
                        },
                        "id_user_group": {
                            "type": "integer",
                            "required": true
                        },
                        "project_access_role": {
                            "type": "string"
                        },
                        "id_service_role": {
                            "type": "integer"
                        }
                    }
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_project": {
            "properties": {
                "project": {
                    "properties": {
                        "id_project": {
                            "type": "integer",
                            "required": true
                        },
                        "id_site": {
                            "type": "integer",
                            "required": true
                        },
                        "project_name": {
                            "type": "string",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_session": {
            "properties": {
                "session": {
                    "properties": {
                        "id_creator_device": {
                            "type": "integer",
                            "required": false
                        },
                        "id_creator_participant": {
                            "type": "integer",
                            "required": false
                        },
                        "id_creator_service": {
                            "type": "integer",
                            "required": false
                        },
                        "id_creator_user": {
                            "type": "integer",
                            "required": false
                        },
                        "id_session": {
                            "type": "integer",
                            "required": true
                        },
                        "id_session_type": {
                            "type": "integer",
                            "required": true
                        },
                        "session_comments": {
                            "type": "string",
                            "required": false
                        },
                        "session_duration": {
                            "type": "integer",
                            "required": true,
                            "default": 0
                        },
                        "session_name": {
                            "type": "string",
                            "required": true
                        },
                        "session_parameters": {
                            "type": "string",
                            "required": false
                        },
                        "session_start_datetime": {
                            "type": "string",
                            "required": true,
                            "format": "date-time"
                        },
                        "session_status": {
                            "type": "integer",
                            "required": true
                        },
                        "session_uuid": {
                            "type": "string",
                            "required": true,
                            "format": "uuid"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "session_manage": {
            "properties": {
                "session_manage": {
                    "type": "object",
                    "properties": {
                        "session_uuid": {
                            "type": "str"
                        },
                        "id_service": {
                            "type": "integer"
                        },
                        "id_session": {
                            "type": "integer"
                        },
                        "id_creator_user": {
                            "type": "integer"
                        },
                        "id_creator_participant": {
                            "type": "integer"
                        },
                        "id_creator_device": {
                            "type": "integer"
                        },
                        "id_creator_service": {
                            "type": "integer"
                        },
                        "id_session_type": {
                            "type": "integer"
                        },
                        "session_participants": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "session_users": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "session_devices": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "action": {
                            "type": "string"
                        },
                        "parameters": {
                            "type": "object"
                        }
                    },
                    "required": [
                        "action"
                    ]
                }
            },
            "type": "object",
            "required": [
                "session_manage"
            ]
        },
        "user_session_type": {
            "properties": {
                "session_type": {
                    "properties": {
                        "id_service": {
                            "type": "integer",
                            "required": false
                        },
                        "id_session_type": {
                            "type": "integer",
                            "required": true
                        },
                        "session_type_category": {
                            "type": "integer",
                            "required": true
                        },
                        "session_type_color": {
                            "type": "string",
                            "required": true
                        },
                        "session_type_config": {
                            "type": "string",
                            "required": false
                        },
                        "session_type_name": {
                            "type": "string",
                            "required": true
                        },
                        "session_type_online": {
                            "type": "boolean",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_session_type_project": {
            "properties": {
                "session_type_project": {
                    "properties": {
                        "id_project": {
                            "type": "integer",
                            "required": true
                        },
                        "id_session_type": {
                            "type": "integer",
                            "required": true
                        },
                        "id_session_type_project": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_session_type_site": {
            "properties": {
                "session_type_site": {
                    "properties": {
                        "id_session_type": {
                            "type": "integer",
                            "required": true
                        },
                        "id_session_type_site": {
                            "type": "integer",
                            "required": true
                        },
                        "id_site": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_session_event": {
            "properties": {
                "session_event": {
                    "properties": {
                        "id_session": {
                            "type": "integer",
                            "required": true
                        },
                        "id_session_event": {
                            "type": "integer",
                            "required": true
                        },
                        "id_session_event_type": {
                            "type": "integer",
                            "required": true
                        },
                        "session_event_context": {
                            "type": "string",
                            "required": false
                        },
                        "session_event_datetime": {
                            "type": "string",
                            "required": true,
                            "format": "date-time"
                        },
                        "session_event_text": {
                            "type": "string",
                            "required": false
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_service": {
            "properties": {
                "service": {
                    "properties": {
                        "id_service": {
                            "type": "integer",
                            "required": true
                        },
                        "service_clientendpoint": {
                            "type": "string",
                            "required": true
                        },
                        "service_default_config": {
                            "type": "string",
                            "required": false,
                            "default": "{}"
                        },
                        "service_editable_config": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "service_enabled": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "service_endpoint": {
                            "type": "string",
                            "required": true
                        },
                        "service_endpoint_device": {
                            "type": "string",
                            "required": false
                        },
                        "service_endpoint_participant": {
                            "type": "string",
                            "required": false
                        },
                        "service_endpoint_user": {
                            "type": "string",
                            "required": false
                        },
                        "service_hostname": {
                            "type": "string",
                            "required": true
                        },
                        "service_key": {
                            "type": "string",
                            "required": true
                        },
                        "service_name": {
                            "type": "string",
                            "required": true
                        },
                        "service_port": {
                            "type": "integer",
                            "required": true
                        },
                        "service_system": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "service_uuid": {
                            "type": "string",
                            "required": true,
                            "format": "uuid"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "service_project": {
            "properties": {
                "service_project": {
                    "properties": {
                        "id_project": {
                            "type": "integer",
                            "required": true
                        },
                        "id_service": {
                            "type": "integer",
                            "required": true
                        },
                        "id_service_project": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "service_site": {
            "properties": {
                "service_site": {
                    "properties": {
                        "id_service": {
                            "type": "integer",
                            "required": true
                        },
                        "id_service_site": {
                            "type": "integer",
                            "required": true
                        },
                        "id_site": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_service_access": {
            "properties": {
                "service_access": {
                    "properties": {
                        "id_device": {
                            "type": "integer",
                            "required": false
                        },
                        "id_participant_group": {
                            "type": "integer",
                            "required": false
                        },
                        "id_service_access": {
                            "type": "integer",
                            "required": true
                        },
                        "id_service_role": {
                            "type": "integer",
                            "required": true
                        },
                        "id_user_group": {
                            "type": "integer",
                            "required": false
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "service_config": {
            "properties": {
                "service_config": {
                    "properties": {
                        "id_device": {
                            "type": "integer",
                            "required": false
                        },
                        "id_participant": {
                            "type": "integer",
                            "required": false
                        },
                        "id_service": {
                            "type": "integer",
                            "required": true
                        },
                        "id_service_config": {
                            "type": "integer",
                            "required": true
                        },
                        "id_user": {
                            "type": "integer",
                            "required": false
                        },
                        "service_config_config": {
                            "type": "string",
                            "required": true,
                            "default": "{}"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_site": {
            "properties": {
                "site": {
                    "properties": {
                        "id_site": {
                            "type": "integer",
                            "required": true
                        },
                        "site_name": {
                            "type": "string",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_site_access": {
            "properties": {
                "site_access": {
                    "properties": {
                        "id_site": {
                            "type": "integer",
                            "required": true
                        },
                        "id_user_group": {
                            "type": "integer",
                            "required": true
                        },
                        "site_access_role": {
                            "type": "string"
                        },
                        "id_service_role": {
                            "type": "integer"
                        }
                    }
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_test_type": {
            "properties": {
                "test_type": {
                    "properties": {
                        "id_service": {
                            "type": "integer",
                            "required": true
                        },
                        "id_test_type": {
                            "type": "integer",
                            "required": true
                        },
                        "test_type_description": {
                            "type": "string",
                            "required": false
                        },
                        "test_type_has_json_format": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "test_type_has_web_editor": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "test_type_has_web_format": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "test_type_key": {
                            "type": "string",
                            "required": false
                        },
                        "test_type_name": {
                            "type": "string",
                            "required": true
                        },
                        "test_type_uuid": {
                            "type": "string",
                            "required": true,
                            "format": "uuid"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_test_type_project": {
            "properties": {
                "test_type_project": {
                    "properties": {
                        "id_project": {
                            "type": "integer",
                            "required": true
                        },
                        "id_test_type": {
                            "type": "integer",
                            "required": true
                        },
                        "id_test_type_project": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_test_type_site": {
            "properties": {
                "test_type_site": {
                    "properties": {
                        "id_site": {
                            "type": "integer",
                            "required": true
                        },
                        "id_test_type": {
                            "type": "integer",
                            "required": true
                        },
                        "id_test_type_site": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_user": {
            "properties": {
                "user": {
                    "properties": {
                        "id_user": {
                            "type": "integer",
                            "required": true
                        },
                        "user_email": {
                            "type": "string",
                            "required": false
                        },
                        "user_enabled": {
                            "type": "boolean",
                            "required": true
                        },
                        "user_firstname": {
                            "type": "string",
                            "required": true
                        },
                        "user_lastname": {
                            "type": "string",
                            "required": true
                        },
                        "user_lastonline": {
                            "type": "string",
                            "required": false,
                            "format": "date-time"
                        },
                        "user_notes": {
                            "type": "string",
                            "required": false
                        },
                        "user_password": {
                            "type": "string",
                            "required": true
                        },
                        "user_profile": {
                            "type": "string",
                            "required": true
                        },
                        "user_superadmin": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "user_username": {
                            "type": "string",
                            "required": true
                        },
                        "user_uuid": {
                            "type": "string",
                            "required": true,
                            "format": "uuid"
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_group": {
            "properties": {
                "user_group": {
                    "properties": {
                        "id_user_group": {
                            "type": "integer",
                            "required": true
                        },
                        "user_group_name": {
                            "type": "string",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_user_group": {
            "properties": {
                "user_user_group": {
                    "properties": {
                        "id_user": {
                            "type": "integer",
                            "required": true
                        },
                        "id_user_group": {
                            "type": "integer",
                            "required": true
                        },
                        "id_user_user_group": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "user_preference": {
            "properties": {
                "user_preference": {
                    "properties": {
                        "id_user": {
                            "type": "integer",
                            "required": true
                        },
                        "id_user_preference": {
                            "type": "integer",
                            "required": true
                        },
                        "user_preference_app_tag": {
                            "type": "string",
                            "required": true
                        },
                        "user_preference_preference": {
                            "type": "string",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "ClientVersions": {
            "properties": {
                "ClientVersions": {
                    "properties": {
                        "client_name": {
                            "type": "string",
                            "required": true
                        },
                        "client_description": {
                            "type": "string",
                            "required": true
                        },
                        "client_version": {
                            "type": "string",
                            "required": true
                        },
                        "client_documentation_url": {
                            "type": "string",
                            "required": true
                        },
                        "client_windows_download_url": {
                            "type": "string",
                            "required": false
                        },
                        "client_mac_download_url": {
                            "type": "string",
                            "required": false
                        },
                        "client_linux_download_url": {
                            "type": "string",
                            "required": false
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "device_session": {
            "properties": {
                "session": {
                    "type": "object",
                    "properties": {
                        "id_session": {
                            "type": "integer"
                        },
                        "session_participants": {
                            "type": "array",
                            "uniqueItems": true,
                            "items": {
                                "type": "string",
                                "format": "uuid"
                            }
                        },
                        "id_session_type": {
                            "type": "integer"
                        },
                        "session_name": {
                            "type": "string"
                        },
                        "session_status": {
                            "type": "integer"
                        },
                        "session_start_datetime": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "id_session",
                        "session_participants",
                        "id_session_type",
                        "session_name",
                        "session_status",
                        "session_start_datetime"
                    ]
                }
            },
            "type": "object",
            "required": [
                "session"
            ]
        },
        "device_status": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "object"
                },
                "timestamp": {
                    "type": "number"
                }
            },
            "required": [
                "status",
                "timestamp"
            ]
        },
        "participant": {
            "properties": {
                "participant": {
                    "type": "object",
                    "properties": {
                        "id_participant": {
                            "type": "integer"
                        },
                        "id_project": {
                            "type": "integer"
                        },
                        "participant_email": {
                            "type": "string"
                        },
                        "participant_name": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "id_participant",
                        "id_project",
                        "participant_email",
                        "participant_name"
                    ]
                }
            },
            "type": "object",
            "required": [
                "participant"
            ]
        },
        "service_device": {
            "properties": {
                "device": {
                    "properties": {
                        "device_certificate": {
                            "type": "string",
                            "required": false
                        },
                        "device_config": {
                            "type": "string",
                            "required": false
                        },
                        "device_enabled": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "device_infos": {
                            "type": "string",
                            "required": false
                        },
                        "device_lastonline": {
                            "type": "string",
                            "required": false,
                            "format": "date-time"
                        },
                        "device_name": {
                            "type": "string",
                            "required": true
                        },
                        "device_notes": {
                            "type": "string",
                            "required": false
                        },
                        "device_onlineable": {
                            "type": "boolean",
                            "required": true,
                            "default": false
                        },
                        "device_token": {
                            "type": "string",
                            "required": false
                        },
                        "device_uuid": {
                            "type": "string",
                            "required": true,
                            "format": "uuid"
                        },
                        "id_device": {
                            "type": "integer",
                            "required": true
                        },
                        "id_device_subtype": {
                            "type": "integer",
                            "required": false
                        },
                        "id_device_type": {
                            "type": "integer",
                            "required": true
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        },
        "session_event": {
            "properties": {
                "session_event": {
                    "properties": {
                        "id_session": {
                            "type": "integer",
                            "required": true
                        },
                        "id_session_event": {
                            "type": "integer",
                            "required": true
                        },
                        "id_session_event_type": {
                            "type": "integer",
                            "required": true
                        },
                        "session_event_context": {
                            "type": "string",
                            "required": false
                        },
                        "session_event_datetime": {
                            "type": "string",
                            "required": true,
                            "format": "date-time"
                        },
                        "session_event_text": {
                            "type": "string",
                            "required": false
                        }
                    },
                    "type": "object"
                }
            },
            "type": "object",
            "location": "json"
        }
    },
    "responses": {
        "ParseError": {
            "description": "When a mask can't be parsed"
        },
        "MaskError": {
            "description": "When any error occurs on mask"
        }
    }
}
